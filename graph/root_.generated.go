// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/oleorhagen/golf-graphql/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Course() CourseResolver
	Mutation() MutationResolver
	Player() PlayerResolver
	Query() QueryResolver
	Scorecard() ScorecardResolver
	ScorecardCourse() ScorecardCourseResolver
	Team() TeamResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Course struct {
		CourseRating func(childComplexity int) int
		Holes        func(childComplexity int) int
		Name         func(childComplexity int) int
		NrHoles      func(childComplexity int) int
		Slope        func(childComplexity int) int
	}

	Hole struct {
		Index func(childComplexity int) int
		Nr    func(childComplexity int) int
		Par   func(childComplexity int) int
	}

	Mutation struct {
		CreatePlayer func(childComplexity int, input model.NewPlayer) int
	}

	Player struct {
		Handicap   func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Scorecards func(childComplexity int) int
	}

	Query struct {
		Courses     func(childComplexity int, limit *int32, offset *int32, orderBy *model.CoursesOrderBy, condition *model.CourseCondition) int
		Players     func(childComplexity int, limit *int32, offset *int32, orderBy *model.PlayersOrderBy, condition *model.PlayerCondition) int
		Scorecards  func(childComplexity int, limit *int32, offset *int32, orderBy *model.ScorecardsOrderBy, condition *model.ScorecardCondition) int
		Teams       func(childComplexity int, limit *int32, offset *int32, orderBy *model.TeamsOrderBy, condition *model.TeamCondition) int
		Tournaments func(childComplexity int, limit *int32, offset *int32, orderBy *model.TournamentsOrderBy, condition *model.TournamentCondition) int
	}

	Scorecard struct {
		Course       func(childComplexity int, condition *model.CourseCondition) int
		Handicap     func(childComplexity int) int
		ID           func(childComplexity int) int
		Player       func(childComplexity int) int
		TournamentID func(childComplexity int) int
	}

	ScorecardCourse struct {
		CourseRating func(childComplexity int) int
		Holes        func(childComplexity int) int
		Name         func(childComplexity int) int
		NrHoles      func(childComplexity int) int
		Slope        func(childComplexity int) int
	}

	ScorecardHole struct {
		ExtraStrokes func(childComplexity int) int
		Index        func(childComplexity int) int
		Nr           func(childComplexity int) int
		Par          func(childComplexity int) int
		Strokes      func(childComplexity int) int
	}

	Team struct {
		Handicap   func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Players    func(childComplexity int) int
		Scorecards func(childComplexity int) int
	}

	Tournament struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Year func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Course.course_rating":
		if e.complexity.Course.CourseRating == nil {
			break
		}

		return e.complexity.Course.CourseRating(childComplexity), true

	case "Course.holes":
		if e.complexity.Course.Holes == nil {
			break
		}

		return e.complexity.Course.Holes(childComplexity), true

	case "Course.name":
		if e.complexity.Course.Name == nil {
			break
		}

		return e.complexity.Course.Name(childComplexity), true

	case "Course.nr_holes":
		if e.complexity.Course.NrHoles == nil {
			break
		}

		return e.complexity.Course.NrHoles(childComplexity), true

	case "Course.slope":
		if e.complexity.Course.Slope == nil {
			break
		}

		return e.complexity.Course.Slope(childComplexity), true

	case "Hole.index":
		if e.complexity.Hole.Index == nil {
			break
		}

		return e.complexity.Hole.Index(childComplexity), true

	case "Hole.nr":
		if e.complexity.Hole.Nr == nil {
			break
		}

		return e.complexity.Hole.Nr(childComplexity), true

	case "Hole.par":
		if e.complexity.Hole.Par == nil {
			break
		}

		return e.complexity.Hole.Par(childComplexity), true

	case "Mutation.createPlayer":
		if e.complexity.Mutation.CreatePlayer == nil {
			break
		}

		args, err := ec.field_Mutation_createPlayer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlayer(childComplexity, args["input"].(model.NewPlayer)), true

	case "Player.handicap":
		if e.complexity.Player.Handicap == nil {
			break
		}

		return e.complexity.Player.Handicap(childComplexity), true

	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true

	case "Player.name":
		if e.complexity.Player.Name == nil {
			break
		}

		return e.complexity.Player.Name(childComplexity), true

	case "Player.scorecards":
		if e.complexity.Player.Scorecards == nil {
			break
		}

		return e.complexity.Player.Scorecards(childComplexity), true

	case "Query.courses":
		if e.complexity.Query.Courses == nil {
			break
		}

		args, err := ec.field_Query_courses_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Courses(childComplexity, args["limit"].(*int32), args["offset"].(*int32), args["orderBy"].(*model.CoursesOrderBy), args["condition"].(*model.CourseCondition)), true

	case "Query.players":
		if e.complexity.Query.Players == nil {
			break
		}

		args, err := ec.field_Query_players_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Players(childComplexity, args["limit"].(*int32), args["offset"].(*int32), args["orderBy"].(*model.PlayersOrderBy), args["condition"].(*model.PlayerCondition)), true

	case "Query.scorecards":
		if e.complexity.Query.Scorecards == nil {
			break
		}

		args, err := ec.field_Query_scorecards_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Scorecards(childComplexity, args["limit"].(*int32), args["offset"].(*int32), args["orderBy"].(*model.ScorecardsOrderBy), args["condition"].(*model.ScorecardCondition)), true

	case "Query.teams":
		if e.complexity.Query.Teams == nil {
			break
		}

		args, err := ec.field_Query_teams_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Teams(childComplexity, args["limit"].(*int32), args["offset"].(*int32), args["orderBy"].(*model.TeamsOrderBy), args["condition"].(*model.TeamCondition)), true

	case "Query.tournaments":
		if e.complexity.Query.Tournaments == nil {
			break
		}

		args, err := ec.field_Query_tournaments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tournaments(childComplexity, args["limit"].(*int32), args["offset"].(*int32), args["orderBy"].(*model.TournamentsOrderBy), args["condition"].(*model.TournamentCondition)), true

	case "Scorecard.course":
		if e.complexity.Scorecard.Course == nil {
			break
		}

		args, err := ec.field_Scorecard_course_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scorecard.Course(childComplexity, args["condition"].(*model.CourseCondition)), true

	case "Scorecard.handicap":
		if e.complexity.Scorecard.Handicap == nil {
			break
		}

		return e.complexity.Scorecard.Handicap(childComplexity), true

	case "Scorecard.id":
		if e.complexity.Scorecard.ID == nil {
			break
		}

		return e.complexity.Scorecard.ID(childComplexity), true

	case "Scorecard.player":
		if e.complexity.Scorecard.Player == nil {
			break
		}

		return e.complexity.Scorecard.Player(childComplexity), true

	case "Scorecard.tournament_id":
		if e.complexity.Scorecard.TournamentID == nil {
			break
		}

		return e.complexity.Scorecard.TournamentID(childComplexity), true

	case "ScorecardCourse.course_rating":
		if e.complexity.ScorecardCourse.CourseRating == nil {
			break
		}

		return e.complexity.ScorecardCourse.CourseRating(childComplexity), true

	case "ScorecardCourse.holes":
		if e.complexity.ScorecardCourse.Holes == nil {
			break
		}

		return e.complexity.ScorecardCourse.Holes(childComplexity), true

	case "ScorecardCourse.name":
		if e.complexity.ScorecardCourse.Name == nil {
			break
		}

		return e.complexity.ScorecardCourse.Name(childComplexity), true

	case "ScorecardCourse.nr_holes":
		if e.complexity.ScorecardCourse.NrHoles == nil {
			break
		}

		return e.complexity.ScorecardCourse.NrHoles(childComplexity), true

	case "ScorecardCourse.slope":
		if e.complexity.ScorecardCourse.Slope == nil {
			break
		}

		return e.complexity.ScorecardCourse.Slope(childComplexity), true

	case "ScorecardHole.extra_strokes":
		if e.complexity.ScorecardHole.ExtraStrokes == nil {
			break
		}

		return e.complexity.ScorecardHole.ExtraStrokes(childComplexity), true

	case "ScorecardHole.index":
		if e.complexity.ScorecardHole.Index == nil {
			break
		}

		return e.complexity.ScorecardHole.Index(childComplexity), true

	case "ScorecardHole.nr":
		if e.complexity.ScorecardHole.Nr == nil {
			break
		}

		return e.complexity.ScorecardHole.Nr(childComplexity), true

	case "ScorecardHole.par":
		if e.complexity.ScorecardHole.Par == nil {
			break
		}

		return e.complexity.ScorecardHole.Par(childComplexity), true

	case "ScorecardHole.strokes":
		if e.complexity.ScorecardHole.Strokes == nil {
			break
		}

		return e.complexity.ScorecardHole.Strokes(childComplexity), true

	case "Team.handicap":
		if e.complexity.Team.Handicap == nil {
			break
		}

		return e.complexity.Team.Handicap(childComplexity), true

	case "Team.id":
		if e.complexity.Team.ID == nil {
			break
		}

		return e.complexity.Team.ID(childComplexity), true

	case "Team.name":
		if e.complexity.Team.Name == nil {
			break
		}

		return e.complexity.Team.Name(childComplexity), true

	case "Team.players":
		if e.complexity.Team.Players == nil {
			break
		}

		return e.complexity.Team.Players(childComplexity), true

	case "Team.scorecards":
		if e.complexity.Team.Scorecards == nil {
			break
		}

		return e.complexity.Team.Scorecards(childComplexity), true

	case "Tournament.id":
		if e.complexity.Tournament.ID == nil {
			break
		}

		return e.complexity.Tournament.ID(childComplexity), true

	case "Tournament.name":
		if e.complexity.Tournament.Name == nil {
			break
		}

		return e.complexity.Tournament.Name(childComplexity), true

	case "Tournament.year":
		if e.complexity.Tournament.Year == nil {
			break
		}

		return e.complexity.Tournament.Year(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCourseCondition,
		ec.unmarshalInputNewPlayer,
		ec.unmarshalInputPlayerCondition,
		ec.unmarshalInputScorecardCondition,
		ec.unmarshalInputTeamCondition,
		ec.unmarshalInputTournamentCondition,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schemas/golf.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schemas/golf.graphqls", Input: sourceData("schemas/golf.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

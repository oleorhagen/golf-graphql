package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	"github.com/oleorhagen/golf-graphql/graph"
	"github.com/oleorhagen/golf-graphql/graph/model"
)

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, input model.NewPlayer) (*model.Player, error) {
	player := &model.Player{
		Name: input.Name,
	}

	return player, nil
}

// Scorecards is the resolver for the scorecards field.
func (r *playerResolver) Scorecards(ctx context.Context, obj *model.Player) ([]*model.Scorecard, error) {
	scorecards, err := getScorecards(r, ctx, obj.ID)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for players scorecards: %w", err)
	}

	fmt.Fprintf(os.Stderr, "Scorecards player results: %v", scorecards)
	return scorecards, nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context) ([]*model.Player, error) {
	var players []*model.Player
	var id uuid.UUID
	var n string
	var handicap int32
	rows, err := r.DB.Query(ctx, "select id, name, handicap from scorer")
	_, err = pgx.ForEachRow(rows, []any{&id, &n, &handicap}, func() error {
		players = append(players, &model.Player{ID: id, Name: n, Handicap: handicap})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for players: %w", err)
	}

	return players, nil
}

// Scorecards is the resolver for the scorecards field.
func (r *queryResolver) Scorecards(ctx context.Context) ([]*model.Scorecard, error) {
	var scorecards []*model.Scorecard
	var id uuid.UUID
	var tournamentID uuid.UUID
	var playerID uuid.UUID
	var handicap int32
	var course_name string
	rows, err := r.DB.Query(ctx,
		"select id, tournament_id, scorer_id, handicap, course_name from scorecard",
	)
	_, err = pgx.ForEachRow(rows, []any{&id, &tournamentID, &playerID, &handicap, &course_name}, func() error {
		fmt.Fprintf(os.Stderr, "Got: %v\n", id)
		scorecards = append(scorecards, &model.Scorecard{
			ID:           id,
			TournamentID: tournamentID,
			Handicap:     handicap,
			CourseName:   course_name,
			PlayerID:     playerID,
		})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for scorecards: %w", err)
	}

	return scorecards, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Tournaments is the resolver for the tournaments field.
func (r *queryResolver) Tournaments(ctx context.Context) ([]*model.Tournament, error) {
	var tournaments []*model.Tournament
	var id uuid.UUID
	var name string
	var year time.Time
	rows, err := r.DB.Query(ctx, "select id, name, year from tournament")
	_, err = pgx.ForEachRow(rows, []any{&id, &name, &year}, func() error {
		fmt.Fprintf(os.Stderr, "Got: %v", id)
		tournaments = append(tournaments, &model.Tournament{ID: id, Name: name, Year: year})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for tournaments: %w", err)
	}

	return tournaments, nil
}

// Player is the resolver for the player field.
func (r *scorecardResolver) Player(ctx context.Context, obj *model.Scorecard) (*model.Player, error) {
	var id uuid.UUID
	var name string
	var handicap int32
	err := r.DB.QueryRow(ctx, "select id, name, handicap from scorer where id=$1", obj.PlayerID).Scan(&id, &name, &handicap)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed (%s): %v\n", obj.PlayerID, err)
		return nil, fmt.Errorf("Failed to query the database for players (%s): %w", obj.PlayerID, err)
	}
	player := model.Player{
		ID:       id,
		Name:     name,
		Handicap: handicap,
	}

	return &player, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Player returns graph.PlayerResolver implementation.
func (r *Resolver) Player() graph.PlayerResolver { return &playerResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Scorecard returns graph.ScorecardResolver implementation.
func (r *Resolver) Scorecard() graph.ScorecardResolver { return &scorecardResolver{r} }

type mutationResolver struct{ *Resolver }
type playerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type scorecardResolver struct{ *Resolver }

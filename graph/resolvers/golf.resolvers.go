package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	"github.com/oleorhagen/golf-graphql/graph"
	"github.com/oleorhagen/golf-graphql/graph/model"
)

// Holes is the resolver for the holes field.
func (r *courseResolver) Holes(ctx context.Context, obj *model.Course) ([]*model.Hole, error) {
	var hole_nr int32
	var index int32
	var par int32
	rows, err := r.DB.Query(ctx, "select hole_nr, hole_index, par from hole where course_name=$1", obj.Name)
	if err != nil {
		return nil, fmt.Errorf("Failed to query the database for players (%s): %w", obj.Name, err)
	}
	var holes []*model.Hole
	_, err = pgx.ForEachRow(rows, []any{&hole_nr, &index, &par}, func() error {
		holes = append(holes, &model.Hole{
			Nr:    hole_nr,
			Index: index,
			Par:   par,
		})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for holes: %w", err)
	}

	return holes, nil
}

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, input model.NewPlayer) (*model.Player, error) {
	player := &model.Player{
		Name: input.Name,
	}

	return player, nil
}

// UpdateScorecard is the resolver for the updateScorecard field.
func (r *mutationResolver) UpdateScorecard(ctx context.Context, input model.UpdateScorecard) (*model.Scorecard, error) {
	tx, err := r.DB.Begin(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to begin transaction: %w", err)
	}
	defer tx.Rollback(ctx)

	// Update hole strokes - need to add a strokes column to course_hole table first
	// For now, this will store in extra_strokes column temporarily
	for _, hole := range input.Holes {
		_, err = tx.Exec(ctx, `
INSERT INTO physical.hole_score (course_name, scorer_id, hole_nr, scorecard_id, strokes)
VALUES (
    (SELECT course_name FROM scorecard WHERE id = $1),
    (SELECT scorer_id FROM scorecard WHERE id = $1),
    $2, -- Hole Nr
    $1, -- Scorecard ID
    $3  -- Strokes
)
ON CONFLICT (course_name, scorer_id, hole_nr, scorecard_id)
DO UPDATE SET strokes = EXCLUDED.strokes`, input.ID, hole.Nr, hole.Strokes)
		if err != nil {
			return nil, fmt.Errorf("failed to update strokes for hole %d: %w", hole.Nr, err)
		}
	}

	err = tx.Commit(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to commit transaction: %w", err)
	}

	// Fetch and return the updated scorecard
	var id uuid.UUID
	var tournamentID uuid.UUID
	var playerID uuid.UUID
	var handicap int32
	var courseName string

	err = r.DB.QueryRow(ctx,
		"SELECT id, tournament_id, scorer_id, handicap, course_name FROM scorecard WHERE id = $1",
		input.ID).Scan(&id, &tournamentID, &playerID, &handicap, &courseName)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch updated scorecard: %w", err)
	}

	return &model.Scorecard{
		ID:           id,
		TournamentID: tournamentID,
		Handicap:     handicap,
		CourseName:   courseName,
		PlayerID:     playerID,
	}, nil
}

// Scorecards is the resolver for the scorecards field.
func (r *playerResolver) Scorecards(ctx context.Context, obj *model.Player) ([]*model.Scorecard, error) {
	scorecards, err := getScorecards(r, ctx, obj.ID)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for players scorecards: %w", err)
	}

	fmt.Fprintf(os.Stderr, "Scorecards player results: %v", scorecards)
	return scorecards, nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context, limit *int32, offset *int32, orderBy *model.PlayersOrderBy, condition *model.PlayerCondition) ([]*model.Player, error) {
	// Build WHERE clause
	whereClause := "WHERE 1=1"
	args := []interface{}{}
	argIndex := 1

	if condition != nil {
		if condition.Name != nil {
			whereClause += fmt.Sprintf(" AND name ILIKE $%d", argIndex)
			args = append(args, "%"+*condition.Name+"%")
			argIndex++
		}
		if condition.Handicap != nil {
			whereClause += fmt.Sprintf(" AND handicap = $%d", argIndex)
			args = append(args, *condition.Handicap)
			argIndex++
		}
		if condition.HandicapGreaterThan != nil {
			whereClause += fmt.Sprintf(" AND handicap > $%d", argIndex)
			args = append(args, *condition.HandicapGreaterThan)
			argIndex++
		}
		if condition.HandicapLessThan != nil {
			whereClause += fmt.Sprintf(" AND handicap < $%d", argIndex)
			args = append(args, *condition.HandicapLessThan)
			argIndex++
		}
	}

	// Build ORDER BY clause
	orderClause := "ORDER BY name ASC" // default
	if orderBy != nil {
		switch *orderBy {
		case model.PlayersOrderByNameAsc:
			orderClause = "ORDER BY name ASC"
		case model.PlayersOrderByNameDesc:
			orderClause = "ORDER BY name DESC"
		case model.PlayersOrderByHandicapAsc:
			orderClause = "ORDER BY handicap ASC"
		case model.PlayersOrderByHandicapDesc:
			orderClause = "ORDER BY handicap DESC"
		case model.PlayersOrderByIDAsc:
			orderClause = "ORDER BY id ASC"
		case model.PlayersOrderByIDDesc:
			orderClause = "ORDER BY id DESC"
		}
	}

	// Handle pagination parameters
	limitValue := int32(10) // default limit
	offsetValue := int32(0) // default offset

	if limit != nil {
		limitValue = *limit
		if limitValue > 100 { // max limit
			limitValue = 100
		}
		if limitValue < 1 { // min limit
			limitValue = 1
		}
	}

	if offset != nil {
		offsetValue = *offset
		if offsetValue < 0 {
			offsetValue = 0
		}
	}

	// Build final query
	query := fmt.Sprintf(`
		SELECT id, name, handicap
		FROM scorer %s %s
		LIMIT $%d OFFSET $%d`,
		whereClause, orderClause, argIndex, argIndex+1)

	args = append(args, limitValue, offsetValue)

	// Execute query
	rows, err := r.DB.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to query players: %w", err)
	}

	var players []*model.Player
	var id uuid.UUID
	var name string
	var handicap int32

	_, err = pgx.ForEachRow(rows, []any{&id, &name, &handicap}, func() error {
		players = append(players, &model.Player{
			ID:       id,
			Name:     name,
			Handicap: handicap,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch players from query players: %w", err)
	}

	return players, nil
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context, limit *int32, offset *int32, orderBy *model.TeamsOrderBy, condition *model.TeamCondition) ([]*model.Team, error) {
	// Build WHERE clause
	whereClause := "WHERE 1=1"
	args := []interface{}{}
	argIndex := 1

	if condition != nil {
		if condition.Name != nil {
			whereClause += fmt.Sprintf(" AND name ILIKE $%d", argIndex)
			args = append(args, "%"+*condition.Name+"%")
			argIndex++
		}
		if condition.Handicap != nil {
			whereClause += fmt.Sprintf(" AND handicap = $%d", argIndex)
			args = append(args, *condition.Handicap)
			argIndex++
		}
		if condition.HandicapGreaterThan != nil {
			whereClause += fmt.Sprintf(" AND handicap > $%d", argIndex)
			args = append(args, *condition.HandicapGreaterThan)
			argIndex++
		}
		if condition.HandicapLessThan != nil {
			whereClause += fmt.Sprintf(" AND handicap < $%d", argIndex)
			args = append(args, *condition.HandicapLessThan)
			argIndex++
		}
	}

	// Build ORDER BY clause
	orderClause := "ORDER BY name ASC" // default
	if orderBy != nil {
		switch *orderBy {
		case model.TeamsOrderByNameAsc:
			orderClause = "ORDER BY name ASC"
		case model.TeamsOrderByNameDesc:
			orderClause = "ORDER BY name DESC"
		case model.TeamsOrderByHandicapAsc:
			orderClause = "ORDER BY handicap ASC"
		case model.TeamsOrderByHandicapDesc:
			orderClause = "ORDER BY handicap DESC"
		case model.TeamsOrderByIDAsc:
			orderClause = "ORDER BY id ASC"
		case model.TeamsOrderByIDDesc:
			orderClause = "ORDER BY id DESC"
		}
	}

	// Handle pagination parameters
	limitValue := int32(10) // default limit
	offsetValue := int32(0) // default offset

	if limit != nil {
		limitValue = *limit
		if limitValue > 100 { // max limit
			limitValue = 100
		}
		if limitValue < 1 { // min limit
			limitValue = 1
		}
	}

	if offset != nil {
		offsetValue = *offset
		if offsetValue < 0 {
			offsetValue = 0
		}
	}

	// Build final query
	query := fmt.Sprintf(`
		SELECT id, name, handicap
		FROM team %s %s
		LIMIT $%d OFFSET $%d`,
		whereClause, orderClause, argIndex, argIndex+1)

	args = append(args, limitValue, offsetValue)

	// Execute query
	rows, err := r.DB.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to query teams: %w", err)
	}

	var teams []*model.Team
	var id uuid.UUID
	var name string
	var handicap int32

	_, err = pgx.ForEachRow(rows, []any{&id, &name, &handicap}, func() error {
		teams = append(teams, &model.Team{
			ID:       id,
			Name:     name,
			Handicap: handicap,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch teams from query: %w", err)
	}

	return teams, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context, limit *int32, offset *int32, orderBy *model.CoursesOrderBy, condition *model.CourseCondition) ([]*model.Course, error) {
	// Build WHERE clause
	whereClause := "WHERE 1=1"
	args := []interface{}{}
	argIndex := 1

	if condition != nil {
		if condition.Name != nil {
			whereClause += fmt.Sprintf(" AND name ILIKE $%d", argIndex)
			args = append(args, "%"+*condition.Name+"%")
			argIndex++
		}
		if condition.Slope != nil {
			whereClause += fmt.Sprintf(" AND slope = $%d", argIndex)
			args = append(args, *condition.Slope)
			argIndex++
		}
		if condition.SlopeGreaterThan != nil {
			whereClause += fmt.Sprintf(" AND slope > $%d", argIndex)
			args = append(args, *condition.SlopeGreaterThan)
			argIndex++
		}
		if condition.SlopeLessThan != nil {
			whereClause += fmt.Sprintf(" AND slope < $%d", argIndex)
			args = append(args, *condition.SlopeLessThan)
			argIndex++
		}
		if condition.NrHoles != nil {
			whereClause += fmt.Sprintf(" AND nr_holes = $%d", argIndex)
			args = append(args, *condition.NrHoles)
			argIndex++
		}
	}

	// Build ORDER BY clause
	orderClause := "ORDER BY name ASC" // default
	if orderBy != nil {
		switch *orderBy {
		case model.CoursesOrderByNameAsc:
			orderClause = "ORDER BY name ASC"
		case model.CoursesOrderByNameDesc:
			orderClause = "ORDER BY name DESC"
		case model.CoursesOrderBySlopeAsc:
			orderClause = "ORDER BY slope ASC"
		case model.CoursesOrderBySlopeDesc:
			orderClause = "ORDER BY slope DESC"
		case model.CoursesOrderByCourseRatingAsc:
			orderClause = "ORDER BY course_rating ASC"
		case model.CoursesOrderByCourseRatingDesc:
			orderClause = "ORDER BY course_rating DESC"
		case model.CoursesOrderByNrHolesAsc:
			orderClause = "ORDER BY nr_holes ASC"
		case model.CoursesOrderByNrHolesDesc:
			orderClause = "ORDER BY nr_holes DESC"
		}
	}

	// Handle pagination parameters
	limitValue := int32(10) // default limit
	offsetValue := int32(0) // default offset

	if limit != nil {
		limitValue = *limit
		if limitValue > 100 { // max limit
			limitValue = 100
		}
		if limitValue < 1 { // min limit
			limitValue = 1
		}
	}

	if offset != nil {
		offsetValue = *offset
		if offsetValue < 0 {
			offsetValue = 0
		}
	}

	// Build final query
	query := fmt.Sprintf(`
		SELECT name, slope, course_rating, nr_holes
		FROM course %s %s
		LIMIT $%d OFFSET $%d`,
		whereClause, orderClause, argIndex, argIndex+1)

	args = append(args, limitValue, offsetValue)

	// Execute query
	rows, err := r.DB.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to query courses: %w", err)
	}

	var courses []*model.Course
	var name string
	var slope int32
	var course_rating float64
	var nr_holes int32

	_, err = pgx.ForEachRow(rows, []any{&name, &slope, &course_rating, &nr_holes}, func() error {
		courses = append(courses, &model.Course{
			Name:         name,
			Slope:        slope,
			CourseRating: course_rating,
			NrHoles:      nr_holes,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch courses from query: %w", err)
	}

	return courses, nil
}

// Tournaments is the resolver for the tournaments field.
func (r *queryResolver) Tournaments(ctx context.Context, limit *int32, offset *int32, orderBy *model.TournamentsOrderBy, condition *model.TournamentCondition) ([]*model.Tournament, error) {
	// Build WHERE clause
	whereClause := "WHERE 1=1"
	args := []interface{}{}
	argIndex := 1

	if condition != nil {
		if condition.Name != nil {
			whereClause += fmt.Sprintf(" AND name ILIKE $%d", argIndex)
			args = append(args, "%"+*condition.Name+"%")
			argIndex++
		}
		if condition.Year != nil {
			whereClause += fmt.Sprintf(" AND year = $%d", argIndex)
			args = append(args, *condition.Year)
			argIndex++
		}
	}

	// Build ORDER BY clause
	orderClause := "ORDER BY name ASC" // default
	if orderBy != nil {
		switch *orderBy {
		case model.TournamentsOrderByNameAsc:
			orderClause = "ORDER BY name ASC"
		case model.TournamentsOrderByNameDesc:
			orderClause = "ORDER BY name DESC"
		case model.TournamentsOrderByYearAsc:
			orderClause = "ORDER BY year ASC"
		case model.TournamentsOrderByYearDesc:
			orderClause = "ORDER BY year DESC"
		case model.TournamentsOrderByIDAsc:
			orderClause = "ORDER BY id ASC"
		case model.TournamentsOrderByIDDesc:
			orderClause = "ORDER BY id DESC"
		}
	}

	// Handle pagination parameters
	limitValue := int32(10) // default limit
	offsetValue := int32(0) // default offset

	if limit != nil {
		limitValue = *limit
		if limitValue > 100 { // max limit
			limitValue = 100
		}
		if limitValue < 1 { // min limit
			limitValue = 1
		}
	}

	if offset != nil {
		offsetValue = *offset
		if offsetValue < 0 {
			offsetValue = 0
		}
	}

	// Build final query
	query := fmt.Sprintf(`
		SELECT id, name, year
		FROM tournament %s %s
		LIMIT $%d OFFSET $%d`,
		whereClause, orderClause, argIndex, argIndex+1)

	args = append(args, limitValue, offsetValue)

	// Execute query
	rows, err := r.DB.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to query tournaments: %w", err)
	}

	var tournaments []*model.Tournament
	var id uuid.UUID
	var name string
	var year time.Time

	_, err = pgx.ForEachRow(rows, []any{&id, &name, &year}, func() error {
		tournaments = append(tournaments, &model.Tournament{
			ID:   id,
			Name: name,
			Year: year,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch tournaments from query: %w", err)
	}

	return tournaments, nil
}

// Scorecards is the resolver for the scorecards field.
func (r *queryResolver) Scorecards(ctx context.Context, limit *int32, offset *int32, orderBy *model.ScorecardsOrderBy, condition *model.ScorecardCondition) ([]*model.Scorecard, error) {
	// Build WHERE clause
	whereClause := "WHERE 1=1"
	args := []interface{}{}
	argIndex := 1

	if condition != nil {
		if condition.Handicap != nil {
			whereClause += fmt.Sprintf(" AND handicap = $%d", argIndex)
			args = append(args, *condition.Handicap)
			argIndex++
		}
		if condition.HandicapGreaterThan != nil {
			whereClause += fmt.Sprintf(" AND handicap > $%d", argIndex)
			args = append(args, *condition.HandicapGreaterThan)
			argIndex++
		}
		if condition.HandicapLessThan != nil {
			whereClause += fmt.Sprintf(" AND handicap < $%d", argIndex)
			args = append(args, *condition.HandicapLessThan)
			argIndex++
		}
		if condition.TournamentID != nil {
			whereClause += fmt.Sprintf(" AND tournament_id = $%d", argIndex)
			args = append(args, *condition.TournamentID)
			argIndex++
		}
		if condition.PlayerID != nil {
			whereClause += fmt.Sprintf(" AND scorer_id = $%d", argIndex)
			args = append(args, *condition.PlayerID)
			argIndex++
		}
	}

	// Build ORDER BY clause
	orderClause := "ORDER BY id ASC" // default
	if orderBy != nil {
		switch *orderBy {
		case model.ScorecardsOrderByHandicapAsc:
			orderClause = "ORDER BY handicap ASC"
		case model.ScorecardsOrderByHandicapDesc:
			orderClause = "ORDER BY handicap DESC"
		case model.ScorecardsOrderByIDAsc:
			orderClause = "ORDER BY id ASC"
		case model.ScorecardsOrderByIDDesc:
			orderClause = "ORDER BY id DESC"
		}
	}

	// Handle pagination parameters
	limitValue := int32(10) // default limit
	offsetValue := int32(0) // default offset

	if limit != nil {
		limitValue = *limit
		if limitValue > 100 { // max limit
			limitValue = 100
		}
		if limitValue < 1 { // min limit
			limitValue = 1
		}
	}

	if offset != nil {
		offsetValue = *offset
		if offsetValue < 0 {
			offsetValue = 0
		}
	}

	// Build final query
	query := fmt.Sprintf(`
		SELECT id, tournament_id, scorer_id, handicap, course_name
		FROM scorecard %s %s
		LIMIT $%d OFFSET $%d`,
		whereClause, orderClause, argIndex, argIndex+1)

	args = append(args, limitValue, offsetValue)

	// Execute query
	rows, err := r.DB.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to query scorecards: %w", err)
	}

	var scorecards []*model.Scorecard
	var id uuid.UUID
	var tournamentID uuid.UUID
	var playerID uuid.UUID
	var handicap int32
	var course_name string

	_, err = pgx.ForEachRow(rows, []any{&id, &tournamentID, &playerID, &handicap, &course_name}, func() error {
		scorecards = append(scorecards, &model.Scorecard{
			ID:           id,
			TournamentID: tournamentID,
			Handicap:     handicap,
			CourseName:   course_name,
			PlayerID:     playerID,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch scorecards from query: %w", err)
	}

	return scorecards, nil
}

// Course is the resolver for the course field.
func (r *scorecardResolver) Course(ctx context.Context, obj *model.Scorecard, condition *model.CourseCondition) (*model.ScorecardCourse, error) {
	// Build WHERE clause
	whereClause := "WHERE name=$1"
	args := []interface{}{obj.CourseName}
	argIndex := 2

	// Apply filtering conditions
	if condition != nil {
		if condition.Name != nil {
			whereClause += fmt.Sprintf(" AND name ILIKE $%d", argIndex)
			args = append(args, "%"+*condition.Name+"%")
			argIndex++
		}
		if condition.Slope != nil {
			whereClause += fmt.Sprintf(" AND slope = $%d", argIndex)
			args = append(args, *condition.Slope)
			argIndex++
		}
		if condition.SlopeGreaterThan != nil {
			whereClause += fmt.Sprintf(" AND slope > $%d", argIndex)
			args = append(args, *condition.SlopeGreaterThan)
			argIndex++
		}
		if condition.SlopeLessThan != nil {
			whereClause += fmt.Sprintf(" AND slope < $%d", argIndex)
			args = append(args, *condition.SlopeLessThan)
			argIndex++
		}
		if condition.NrHoles != nil {
			whereClause += fmt.Sprintf(" AND nr_holes = $%d", argIndex)
			args = append(args, *condition.NrHoles)
			argIndex++
		}
	}

	query := fmt.Sprintf("SELECT name, slope, course_rating, nr_holes FROM course %s", whereClause)

	var name string
	var slope int32
	var courseRating float64
	var nrHoles int32

	err := r.DB.QueryRow(ctx, query, args...).Scan(&name, &slope, &courseRating, &nrHoles)
	if err != nil {
		return nil, fmt.Errorf("Failed to query the database for course (%s): %w", obj.CourseName, err)
	}

	course := &model.ScorecardCourse{
		Name:         name,
		Slope:        slope,
		CourseRating: courseRating,
		NrHoles:      nrHoles,
		ScorecardID:  obj.ID, // Pass scorecard ID for hole resolution
	}

	return course, nil
}

// Player is the resolver for the player field.
func (r *scorecardResolver) Player(ctx context.Context, obj *model.Scorecard) (*model.Player, error) {
	var id uuid.UUID
	var name string
	var handicap int32
	err := r.DB.QueryRow(ctx, "select id, name, handicap from scorer where id=$1", obj.PlayerID).Scan(&id, &name, &handicap)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed (%s): %v\n", obj.PlayerID, err)
		return nil, fmt.Errorf("Failed to query the database for players (%s): %w", obj.PlayerID, err)
	}
	player := model.Player{
		ID:       id,
		Name:     name,
		Handicap: handicap,
	}

	return &player, nil
}

// Holes is the resolver for the holes field.
func (r *scorecardCourseResolver) Holes(ctx context.Context, obj *model.ScorecardCourse) ([]*model.ScorecardHole, error) {
	var holes []*model.ScorecardHole

	rows, err := r.DB.Query(ctx, `
	SELECT
			ch.hole_nr,
			ch.hole_index,
			ch.par,
			ch.extra_strokes,
			hs.strokes,
			hs.points
		FROM course_hole ch
		LEFT JOIN hole_score hs ON (
			ch.hole_nr = hs.hole_nr
			AND ch.course_name = hs.course_name
			AND hs.scorecard_id = $1
      AND ch.player_id = hs.scorer_id
		)
		WHERE ch.course_name = $2
		  AND ch.id = $1
		ORDER BY ch.hole_nr
`, obj.ScorecardID, obj.Name)

	if err != nil {
		return nil, fmt.Errorf("Failed to query holes for scorecard course (%s): %w", obj.Name, err)
	}

	var holeNr, index, par, extra_strokes int32
	var strokes, points *int32
	_, err = pgx.ForEachRow(rows, []any{&holeNr, &index, &par, &extra_strokes, &strokes, &points}, func() error {
		holes = append(holes, &model.ScorecardHole{
			Nr:           holeNr,
			Index:        index,
			Par:          par,
			Strokes:      strokes,
			ExtraStrokes: extra_strokes,
			Points:       points,
		})
		return nil
	})

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch holes for scorecard course: %w", err)
	}

	return holes, nil
}

// Scorecards is the resolver for the scorecards field.
func (r *teamResolver) Scorecards(ctx context.Context, obj *model.Team) ([]*model.Scorecard, error) {
	var scorecards []*model.Scorecard
	var id uuid.UUID
	var tournamentID uuid.UUID
	var playerID uuid.UUID
	var handicap int32
	var course_name string
	rows, err := r.DB.Query(ctx,
		"select id, tournament_id, scorer_id, handicap, course_name from scorecard where scorer_id=$1",
		obj.ID,
	)
	_, err = pgx.ForEachRow(rows, []any{&id, &tournamentID, &playerID, &handicap, &course_name}, func() error {
		fmt.Fprintf(os.Stderr, "Got: %v\n", id)
		scorecards = append(scorecards, &model.Scorecard{
			ID:           id,
			TournamentID: tournamentID,
			Handicap:     handicap,
			CourseName:   course_name,
			PlayerID:     playerID,
		})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for scorecards: %w", err)
	}

	return scorecards, nil
}

// Players is the resolver for the players field.
func (r *teamResolver) Players(ctx context.Context, obj *model.Team) ([]*model.Player, error) {
	var players []*model.Player
	var id uuid.UUID
	var name string
	var handicap int32
	rows, err := r.DB.Query(ctx,
		"select player_id, player_name, player.handicap from team_member inner join player on player_id = player.id where team_id = $1", obj.ID)
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed (%s): %v\n", obj.ID, err)
		return nil, fmt.Errorf("Failed to query the database for team members (%s): %w", obj.ID, err)
	}
	_, err = pgx.ForEachRow(rows, []any{&id, &name, &handicap}, func() error {
		fmt.Fprintf(os.Stderr, "Got: %v", id)
		players = append(players, &model.Player{ID: id, Name: name, Handicap: handicap})
		return nil
	})
	return players, nil
}

// Course returns graph.CourseResolver implementation.
func (r *Resolver) Course() graph.CourseResolver { return &courseResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Player returns graph.PlayerResolver implementation.
func (r *Resolver) Player() graph.PlayerResolver { return &playerResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Scorecard returns graph.ScorecardResolver implementation.
func (r *Resolver) Scorecard() graph.ScorecardResolver { return &scorecardResolver{r} }

// ScorecardCourse returns graph.ScorecardCourseResolver implementation.
func (r *Resolver) ScorecardCourse() graph.ScorecardCourseResolver {
	return &scorecardCourseResolver{r}
}

// Team returns graph.TeamResolver implementation.
func (r *Resolver) Team() graph.TeamResolver { return &teamResolver{r} }

type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type playerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type scorecardResolver struct{ *Resolver }
type scorecardCourseResolver struct{ *Resolver }
type teamResolver struct{ *Resolver }

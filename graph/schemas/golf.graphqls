type Player {
  id: ID!
  name: String!
  handicap: Int!
  scorecards: [Scorecard]
}

type Team {
  id: ID!
  name: String!
  handicap: Int!
  scorecards: [Scorecard]
  players: [Player!]
}

type Scorecard {
  id: ID!
  tournament_id: ID!
  handicap: Int!
  course(condition: CourseCondition): ScorecardCourse!
  player: Player!
}

type ScorecardHole {
  nr: Int!
  index: Int!
  par: Int!
  strokes: Int!
  extra_strokes: Int!
}

type ScorecardCourse {
  name: String!
  slope: Int!
  course_rating: Float!
  nr_holes: Int!
  holes: [ScorecardHole!]!
}

type Course {
  name: String!
  slope: Int!
  course_rating: Float!
  nr_holes: Int!
  holes: [Hole!]
}

type Hole {
  nr: Int!
  index: Int!
  par: Int!
}

scalar Time

type Tournament {
  id: ID!
  name: String!
  year: Time!
}

# Player ordering enum
enum PlayersOrderBy {
  NAME_ASC
  NAME_DESC
  HANDICAP_ASC
  HANDICAP_DESC
  ID_ASC
  ID_DESC
}

# Player filtering input
input PlayerCondition {
  name: String
  handicap: Int
  handicapGreaterThan: Int
  handicapLessThan: Int
}

# Team ordering enum
enum TeamsOrderBy {
  NAME_ASC
  NAME_DESC
  HANDICAP_ASC
  HANDICAP_DESC
  ID_ASC
  ID_DESC
}

# Team filtering input
input TeamCondition {
  name: String
  handicap: Int
  handicapGreaterThan: Int
  handicapLessThan: Int
}

# Course ordering enum
enum CoursesOrderBy {
  NAME_ASC
  NAME_DESC
  SLOPE_ASC
  SLOPE_DESC
  COURSE_RATING_ASC
  COURSE_RATING_DESC
  NR_HOLES_ASC
  NR_HOLES_DESC
}

# Course filtering input
input CourseCondition {
  name: String
  slope: Int
  slopeGreaterThan: Int
  slopeLessThan: Int
  nrHoles: Int
}

# Tournament ordering enum
enum TournamentsOrderBy {
  NAME_ASC
  NAME_DESC
  YEAR_ASC
  YEAR_DESC
  ID_ASC
  ID_DESC
}

# Tournament filtering input
input TournamentCondition {
  name: String
  year: Time
}

# Scorecard ordering enum
enum ScorecardsOrderBy {
  HANDICAP_ASC
  HANDICAP_DESC
  ID_ASC
  ID_DESC
}

# Scorecard filtering input
input ScorecardCondition {
  handicap: Int
  handicapGreaterThan: Int
  handicapLessThan: Int
  tournamentId: ID
  playerId: ID
}

type Query {
  players(
    limit: Int = 10
    offset: Int = 0
    orderBy: PlayersOrderBy = NAME_ASC
    condition: PlayerCondition
  ): [Player!]!

  teams(
    limit: Int = 10
    offset: Int = 0
    orderBy: TeamsOrderBy = NAME_ASC
    condition: TeamCondition
  ): [Team!]!

  courses(
    limit: Int = 10
    offset: Int = 0
    orderBy: CoursesOrderBy = NAME_ASC
    condition: CourseCondition
  ): [Course!]!

  tournaments(
    limit: Int = 10
    offset: Int = 0
    orderBy: TournamentsOrderBy = NAME_ASC
    condition: TournamentCondition
  ): [Tournament!]!

  scorecards(
    limit: Int = 10
    offset: Int = 0
    orderBy: ScorecardsOrderBy = ID_ASC
    condition: ScorecardCondition
  ): [Scorecard!]!
}

input NewPlayer {
  name: String!
}

type Mutation {
  createPlayer(input: NewPlayer!): Player!
}

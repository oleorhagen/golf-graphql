type Player {
  id: ID!
  name: String!
  handicap: Int!
  scorecards: [Scorecard]
}

type Team {
  id: ID!
  name: String!
  handicap: Int!
  scorecards: [Scorecard]
  players: [Player!]
}

type Scorecard {
  id: ID!
  tournament_id: ID!
  handicap: Int!
  course_name: String!
  player: Player!
}

type Course {
  name: String!
  slope: Int!
  course_rating: Float!
  nr_holes: Int!
  holes: [Hole!]
}

type Hole {
  nr: Int!
  index: Int!
  par: Int!
}

scalar Time

type Tournament {
  id: ID!
  name: String!
  year: Time!
}

# Player ordering enum
enum PlayersOrderBy {
  NAME_ASC
  NAME_DESC
  HANDICAP_ASC
  HANDICAP_DESC
  ID_ASC
  ID_DESC
}

# Player filtering input
input PlayerCondition {
  name: String
  handicap: Int
  handicapGreaterThan: Int
  handicapLessThan: Int
}

type Query {
  players(
    limit: Int = 10
    offset: Int = 0
    orderBy: PlayersOrderBy = NAME_ASC
    condition: PlayerCondition
  ): [Player!]!
  teams: [Team]
  scorecards: [Scorecard]
  courses: [Course]
  tournaments: [Tournament]
}

input NewPlayer {
  name: String!
}

type Mutation {
  createPlayer(input: NewPlayer!): Player!
}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"os"

	pgx "github.com/jackc/pgx/v5"
	"github.com/oleorhagen/golf-graphql/graph/model"
)

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, input model.NewPlayer) (*model.Player, error) {
	player := &model.Player{
		Name: input.Name,
	}

	r.players = append(r.players, player)
	return player, nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context) ([]*model.Player, error) {
	var names []*model.Player
	var n string
	rows, err := r.DB.Query(context.Background(), "select name from player")
	_, err = pgx.ForEachRow(rows, []any{&n}, func() error {
		names = append(names, &model.Player{Name: n})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for players: %w", err)
	}

	r.players = names
	return r.players, nil
}

// Tournaments is the resolver for the tournaments field.
func (r *queryResolver) Tournaments(ctx context.Context) ([]*model.Tournament, error) {
	var names []*model.Player
	var n string
	rows, err := r.DB.Query(context.Background(), "select name from player")
	_, err = pgx.ForEachRow(rows, []any{&n}, func() error {
		names = append(names, &model.Player{Name: n})
		return nil
	})
	if err != nil {
		fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
		return nil, fmt.Errorf("Failed to query the database for players: %w", err)
	}

	r.players = append(r.players, names...)
	return r.players, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

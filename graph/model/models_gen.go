// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Course struct {
	Name         string  `json:"name"`
	Slope        int32   `json:"slope"`
	CourseRating float64 `json:"course_rating"`
	NrHoles      int32   `json:"nr_holes"`
	Holes        []*Hole `json:"holes,omitempty"`
}

type Hole struct {
	Nr    int32 `json:"nr"`
	Index int32 `json:"index"`
	Par   int32 `json:"par"`
}

type Mutation struct {
}

type NewPlayer struct {
	Name string `json:"name"`
}

type Player struct {
	ID         uuid.UUID    `json:"id"`
	Name       string       `json:"name"`
	Handicap   int32        `json:"handicap"`
	Scorecards []*Scorecard `json:"scorecards,omitempty"`
}

type PlayerCondition struct {
	Name                *string `json:"name,omitempty"`
	Handicap            *int32  `json:"handicap,omitempty"`
	HandicapGreaterThan *int32  `json:"handicapGreaterThan,omitempty"`
	HandicapLessThan    *int32  `json:"handicapLessThan,omitempty"`
}

type Query struct {
}

type Team struct {
	ID         uuid.UUID    `json:"id"`
	Name       string       `json:"name"`
	Handicap   int32        `json:"handicap"`
	Scorecards []*Scorecard `json:"scorecards,omitempty"`
	Players    []*Player    `json:"players,omitempty"`
}

type Tournament struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Year time.Time `json:"year"`
}

type PlayersOrderBy string

const (
	PlayersOrderByNameAsc      PlayersOrderBy = "NAME_ASC"
	PlayersOrderByNameDesc     PlayersOrderBy = "NAME_DESC"
	PlayersOrderByHandicapAsc  PlayersOrderBy = "HANDICAP_ASC"
	PlayersOrderByHandicapDesc PlayersOrderBy = "HANDICAP_DESC"
	PlayersOrderByIDAsc        PlayersOrderBy = "ID_ASC"
	PlayersOrderByIDDesc       PlayersOrderBy = "ID_DESC"
)

var AllPlayersOrderBy = []PlayersOrderBy{
	PlayersOrderByNameAsc,
	PlayersOrderByNameDesc,
	PlayersOrderByHandicapAsc,
	PlayersOrderByHandicapDesc,
	PlayersOrderByIDAsc,
	PlayersOrderByIDDesc,
}

func (e PlayersOrderBy) IsValid() bool {
	switch e {
	case PlayersOrderByNameAsc, PlayersOrderByNameDesc, PlayersOrderByHandicapAsc, PlayersOrderByHandicapDesc, PlayersOrderByIDAsc, PlayersOrderByIDDesc:
		return true
	}
	return false
}

func (e PlayersOrderBy) String() string {
	return string(e)
}

func (e *PlayersOrderBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlayersOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlayersOrderBy", str)
	}
	return nil
}

func (e PlayersOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PlayersOrderBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PlayersOrderBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
